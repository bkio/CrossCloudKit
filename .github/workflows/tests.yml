name: Update Test Badge

on:
  push:
    branches: [ main ]

jobs:
  test-and-badge:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '10.0.x'
        dotnet-quality: 'preview'

    - name: Cache NuGet packages
      uses: actions/cache@v4
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
        restore-keys: |
          ${{ runner.os }}-nuget-

    - name: Restore dependencies
      run: dotnet restore CrossCloudKit.sln

    - name: Build solution
      run: dotnet build CrossCloudKit.sln --no-restore --configuration Release

    - name: Run tests and generate report
      run: |
        dotnet test CrossCloudKit.sln --no-build --configuration Release --verbosity quiet --logger:"trx;LogFileName=TestResults.trx" --results-directory TestResults --collect:"XPlat Code Coverage"
      env:
        # AWS Configuration
        AWS_ACCESS_KEY: ${{ secrets.AWS_ACCESS_KEY }}
        AWS_SECRET_KEY: ${{ secrets.AWS_SECRET_KEY }}
        AWS_REGION: ${{ secrets.AWS_REGION }}

        # Google Cloud Configuration
        GOOGLE_BASE64_CREDENTIALS: ${{ secrets.GOOGLE_BASE64_CREDENTIALS }}
        GOOGLE_CLOUD_PROJECT: ${{ secrets.GOOGLE_CLOUD_PROJECT }}
        GOOGLE_CLOUD_TEST_BUCKET: ${{ secrets.GOOGLE_CLOUD_TEST_BUCKET }}

        # MongoDB Configuration
        MONGODB_HOST: ${{ secrets.MONGODB_HOST }}
        MONGODB_USER: ${{ secrets.MONGODB_USER }}
        MONGODB_PASSWORD: ${{ secrets.MONGODB_PASSWORD }}

        # Redis Configuration
        REDIS_HOST: ${{ secrets.REDIS_HOST }}
        REDIS_PORT: ${{ secrets.REDIS_PORT }}
        REDIS_USER: ${{ secrets.REDIS_USER }}
        REDIS_PASSWORD: ${{ secrets.REDIS_PASSWORD }}

        # S3 Compatible Storage Configuration
        S3_ACCESS_KEY: ${{ secrets.S3_ACCESS_KEY }}
        S3_SECRET_KEY: ${{ secrets.S3_SECRET_KEY }}
        S3_REGION: ${{ secrets.S3_REGION }}
        S3_SERVER_ADDRESS: ${{ secrets.S3_SERVER_ADDRESS }}
      continue-on-error: true

    - name: Parse test results and create badge
      run: |
        # Install xmlstarlet for XML parsing
        sudo apt-get update && sudo apt-get install -y xmlstarlet

        # Find TRX files
        find TestResults -name "*.trx" -type f || echo "No TRX files found"
        ls -la TestResults/ || echo "TestResults directory not found"

        # Find the TRX file (it might not be named exactly TestResults.trx)
        trx_file=$(find TestResults -name "*.trx" -type f | head -1)

        if [ -n "$trx_file" ] && [ -f "$trx_file" ]; then
          echo "Processing TRX file: $trx_file"

          # Try multiple XPath patterns for different TRX formats
          total_tests=$(xmlstarlet sel -t -v "//TestRun/ResultSummary/Counters/@total" "$trx_file" 2>/dev/null || \
                       xmlstarlet sel -t -v "//Counters/@total" "$trx_file" 2>/dev/null || \
                       xmlstarlet sel -t -v "count(//UnitTestResult)" "$trx_file" 2>/dev/null || echo "0")

          passed_tests=$(xmlstarlet sel -t -v "//TestRun/ResultSummary/Counters/@passed" "$trx_file" 2>/dev/null || \
                        xmlstarlet sel -t -v "//Counters/@passed" "$trx_file" 2>/dev/null || \
                        xmlstarlet sel -t -v "count(//UnitTestResult[@outcome='Passed'])" "$trx_file" 2>/dev/null || echo "0")

          failed_tests=$(xmlstarlet sel -t -v "//TestRun/ResultSummary/Counters/@failed" "$trx_file" 2>/dev/null || \
                        xmlstarlet sel -t -v "//Counters/@failed" "$trx_file" 2>/dev/null || \
                        xmlstarlet sel -t -v "count(//UnitTestResult[@outcome='Failed'])" "$trx_file" 2>/dev/null || echo "0")

          echo "Total tests: $total_tests"
          echo "Passed tests: $passed_tests"
          echo "Failed tests: $failed_tests"

          # Determine badge color and message
          if [ "$total_tests" -gt "0" ] && [ "$failed_tests" -eq "0" ]; then
            color="brightgreen"
            message="${passed_tests}%2F${total_tests}%20passing"
          elif [ "$total_tests" -gt "0" ] && [ "$failed_tests" -gt "0" ]; then
            color="red"
            message="${passed_tests}%2F${total_tests}%20failing"
          else
            color="orange"
            message="no%20tests"
          fi

          # Create badge URL
          badge_url="https://img.shields.io/badge/Tests-${message}-${color}"

          echo "BADGE_URL=$badge_url" >> $GITHUB_ENV
          echo "TEST_STATUS=${passed_tests}/${total_tests}" >> $GITHUB_ENV

        else
          echo "No test results file found"
          echo "BADGE_URL=https://img.shields.io/badge/Tests-no%20results-orange" >> $GITHUB_ENV
          echo "TEST_STATUS=no results" >> $GITHUB_ENV
        fi

    - name: Update README with test badge
      run: |
        echo "Badge URL: $BADGE_URL"

        # Remove any existing test badge
        sed -i '/!\[Tests\]/d' README.md

        # Add the new test badge after the .NET badge line
        sed -i '/!\[\.NET 10\]/a ![Tests]('"$BADGE_URL"')' README.md

        echo "Updated README with test status: $TEST_STATUS"

        # Show the updated badge section
        head -5 README.md

    - name: Commit and push changes
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"

        if git diff --quiet; then
          echo "No changes to commit"
        else
          git add README.md
          git commit -m "Update test status badge: $TEST_STATUS"
          git push
        fi
